y= trainmodel$LONGITUDE,
test= d_testphase[,WAPS_BUILD_FLOOR_LAT2])
Per_knn_longitude2 <- postResample(class_knn_longitude2[["pred"]],testphase$LONGITUDE)
Per_knn_longitude2
class_knn_building3 <- FNN::knn(train = d_trainmodel[c(1:520)],
cl= trainmodel$BUILDINGID,
test= d_validationData[,WAPS3])
Per_knn_building3 <- confusionMatrix(class_knn_building3, validationData$BUILDINGID)
Per_knn_building3
class_knn_floor3 <- FNN::knn(train = d_trainmodel[c(1:523)],
cl= trainmodel$FLOOR,
test= d_validationData[,WAPS_BUILD3])
Per_knn_floor3 <- confusionMatrix(class_knn_floor3, validationData$FLOOR)
Per_knn_floor3
class_knn_latitude3 <- FNN::knn.reg(train = d_trainmodel[c(1:528)],
y= trainmodel$LATITUDE,
test= d_validationData[,WAPS_BUILD_FLOOR3])
Per_knn_latitude3 <- postResample(class_knn_latitude3[["pred"]], validationData$LATITUDE)
Per_knn_latitude3
class_knn_longitude3 <- FNN::knn.reg(train = d_trainmodel[c(1:529)],
y= trainmodel$LONGITUDE,
test= d_validationData[,WAPS_BUILD_FLOOR_LAT3])
Per_knn_longitude3 <- postResample(class_knn_longitude3[["pred"]],validationData$LONGITUDE)
Per_knn_longitude3
df_knn_error <- data.frame(a = class_knn_latitude2[["pred"]])
df_knn_error <- data.frame(BUILDINGID = class_knn_building3, FLOOR = class_knn_floor3, LATITUDE = class_knn_latitude3[["pred"]], LONGITUDE = class_knn_longitude3[["pred"]])
View(df_knn_error)
names(df_knn_error) <- paste("pred", names(df_knn_error), sep = "_")
df_knn_error <- cbind(validationData[,c(521:524)], df_knn_error)
View(df_knn_error)
names(df_knn_error)[1:4] <- paste("real", names(df_knn_error)[1:4], sep = "_")
View(df_knn_error)
df_knn_error$long_diff = abs(abs(df_knn_error$real_LONGITUDE) - abs(df_knn_error$pred_LONGITUDE))
df_knn_error$lat_diff = abs(abs(df_knn_error$real_LATITUDE) - abs(df_knn_error$pred_LATITUDE))
summary(df_knn_error$long_diff)
summary(df_knn_error$lat_diff)
df_knn_error$PREDICTION = "empty"
for (i in 1:nrow(df_knn_error)) {
if (df_knn_error[i,"long_diff"] <= 9 & df_knn_error[i,"lat_diff"] <= 9) {
df_knn_error[i,"PREDICTION"] = "Great! :)"
} else if (df_knn_error[i,"long_diff"] <= 20 & df_knn_error[i,"lat_diff"] <= 20) {
df_knn_error[i,"PREDICTION"] = "Ok... :|"
} else if (df_knn_error[i,"long_diff"] <= 50 & df_knn_error[i,"lat_diff"] <= 50) {
df_knn_error[i,"PREDICTION"] = "Awfull :("
} else {
df_knn_error[i,"PREDICTION"] = "Weird :S"
}
}
df_knn_error$PREDICTION = as.factor(x = df_knn_error$PREDICTION)
summary(df_knn_error$PREDICTION)
## Without signals between -34 and 0 and -10 and -20
## With user6
## Modelling: no cascade
## RF
pacman::p_load(tibble, readr, tidyr, anytime, reshape2, corrplot, ggplot2, caret, highcharter,
plotly, dplyr,plyr,imager,RColorBrewer,gdata,
randomForest, tidyr, forecast, lubridate, scatterplot3d, ranger, data.table, h2o, plyr, FNN)
setwd("C:/Users/Ibai/Desktop/Part_3/Task_2/Techniques for Wifi Locationing/")
trainmodel <- readRDS("Data/trainmodel.rds")
trainphase <- readRDS("Data/trainphase.rds")
testphase <- readRDS("Data/testphase.rds")
validationData <- readRDS("Data/validationData.rds")
densitymodel <- melt(trainmodel[, grep("WAP", names(trainmodel))])
# ggplot(densitymodel, aes(x=densitymodel$value))+
#   geom_density(color="darkblue", fill="lightblue") + xlim(0.000000001, 200)
# range(densitymodel$value)
##### MODELLING EACH CATEGORY #####
## Finding the best mtry for each model:
WAPS <- colnames(trainmodel[,grep("WAP", names(trainmodel))])
WAPS_BUILD <- colnames(trainmodel[,grep("WAP|BUILDING", names(trainmodel))])
WAPS_BUILD_FLOOR <- colnames(trainmodel[,grep("WAP|BUILDING|FLOOR", names(trainmodel))])
WAPS_BUILD_FLOOR_LAT <- colnames(trainmodel[,grep("WAP|BUILDING|FLOOR|LATITUDE", names(trainmodel))])
WAPS_BUILD_FLOOR_LAT_LONG <- colnames(trainmodel[,grep("WAP|BUILDING|FLOOR|LATITUDE|LONGITUDE", names(trainmodel))])
# mtry_building <- as.data.frame(tuneRF(x= trainmodel[WAPS], y= trainmodel$BUILDINGID, ntree= 100, plot = F))
# mtry_floor <- as.data.frame(tuneRF(x= trainmodel[WAPS_BUILD], y= trainmodel$FLOOR, ntree= 100, plot = F))
# mtry_latitude <- as.data.frame(tuneRF(x= trainmodel[WAPS_BUILD_FLOOR], y= trainmodel$LATITUDE, ntree= 100, plot = F))
# mtry_longitude <- as.data.frame(tuneRF(x= trainmodel[WAPS_BUILD_FLOOR_LAT], y= trainmodel$LONGITUDE, ntree= 100, plot = F))
#
# mtry_rf <- list(mtry_building, mtry_floor, mtry_longitude,mtry_latitude)
# mtry_metrix <- c()
# results <- c()
# for (i in 1:4){
#
#   min_mtry <- mtry_rf[[i]][which.min(mtry_rf[[i]][["OOBError"]]),1]
#   results[i] <- cbind(mtry_metrix, min_mtry)
# }
#
# print(results)
# mtry building: 11
# mtry floor: 44
# mtry latitude: 174
# mtry longitude: 174
##### CREATING THE PREDICTIVE MODELS FOR EACH COLUMN #### RF
fitControl <- trainControl(method = "repeatedcv",
number=10,
repeats = 1)
# BUILDING #
# rf1_building <- ranger(BUILDINGID~.,
#                         data = trainmodel[,WAPS_BUILD],
#                         mtry = 11)
# saveRDS(rf1_building, "Models/rf1_building.rds")
start_knn1_build <- Sys.time()
knn1_building <- train(y= trainmodel$BUILDINGID,
x = trainmodel[,WAPS],
method = "knn",
trControl = fitControl)
end_knn1_build <- Sys.time()
time_knn1_build <- start_knn1_build - end_knn1_build
saveRDS(knn1_building, "Models/knn1_building")
# FLOOR #
# rf1_floor <- ranger(FLOOR~.,
#                     data = trainmodel[,WAPS_BUILD_FLOOR],
#                     mtry = 44)
# saveRDS(rf1_floor, "Models/rf1_floor.rds")
# start_knn1_floor <- Sys.time()
# knn1_floor <- train(y= trainmodel$FLOOR, x= trainmodel[,WAPS_BUILD_FLOOR], method = "knn", trControl = fitControl)
# end_knn1_floor <- Sys.time()
# time_knn1_floor <- start_knn1_build - end_knn1_build
# saveRDS(knn1_floor, "Models/knn1_floor")
# LATITUDE #
# rf1_latitude <- ranger(LATITUDE~.,
#                        data = trainmodel[,WAPS_BUILD_FLOOR_LAT],
#                        mtry = 174)
# saveRDS(rf1_latitude, "Models/rf1_latitude.rds")
# start_knn1_latitude <- Sys.time()
# knn1_latitude <- train(y= trainmodel$LATITUDE x= trainmodel[,WAPS_BUILD_FLOOR_LAT], method = "knn", trControl = fitControl)
# end_knn1_latitude <- Sys.time()
# time_knn1_latitude <- start_knn1_latitude - end_knn1_latitude
# saveRDS(knn1_latitude, "Models/knn1_latitude")
# LONGITUDE #
# rf1_longitude <- ranger(LONGITUDE~.,
#                        data = trainmodel[,WAPS_BUILD_FLOOR_LAT_LONG],
#                        mtry = 174)
# saveRDS(rf1_longitude, "Models/rf1_longitude.rds")
knn1_longitude <-
###
rm(WAPS_BUILD, WAPS_BUILD_FLOOR, WAPS_BUILD_FLOOR_LAT, WAPS_BUILD_FLOOR_LAT_LONG, mtry_building, mtry_floor, mtry_longitude, mtry_latitude)
###
rf1_building <- readRDS("Models/rf1_building.rds")
rf1_floor <- readRDS("Models/rf1_floor.rds")
rf1_latitude <- readRDS("Models/rf1_latitude.rds")
rf1_longitude <- readRDS("Models/rf1_longitude.rds")
#### PREDICTIONS #####
## PHASE 1 ## Measuring the performance in trainphase
# BUILDING #
pred1_building <- predict(rf1_building, data = trainphase[WAPS])
Per_rf1_building <- confusionMatrix(pred1_building[["predictions"]],trainphase$BUILDINGID)
Per_rf1_building
pred1_knn_building <- predict(knn1_building, trainphase[WAPS])
Per_knn1_building <- confusionMatrix(pred1_knn_building, trainphase$BUILDINGID)
Per_knn1_building
# FLOOR #
trainphase_1 <- trainphase[WAPS]
trainphase_1$BUILDINGID <- pred1_building[["predictions"]]
pred1_floor <- predict(rf1_floor, data = trainphase_1)
Per_rf1_floor <- confusionMatrix(pred1_floor[["predictions"]],trainphase$FLOOR)
Per_rf1_floor
# LATITUDE #
trainphase_1$FLOOR <- pred1_floor[["predictions"]]
pred1_latitude <- predict(rf1_latitude, data = trainphase_1)
Per_rf1_latitude <- postResample(pred1_latitude[["predictions"]],trainphase$LATITUDE)
Per_rf1_latitude
# LONGITUDE #
trainphase_1$LATITUDE <- pred1_latitude[["predictions"]]
pred1_longitude <- predict(rf1_longitude, data = trainphase_1)
Per_rf1_longitude <- postResample(pred1_longitude[["predictions"]],trainphase$LONGITUDE)
Per_rf1_longitude
trainphase_1$LONGITUDE <- pred1_longitude[["predictions"]]
### PLOTTING THE ERRORS ###
## PHASE 2 ## Measuring the performance in testphase
# BUILDING #
pred1_building <- predict(rf1_building, data = testphase[WAPS])
Per_rf1_building <- confusionMatrix(pred1_building[["predictions"]],testphase$BUILDINGID)
Per_rf1_building
# FLOOR #
testphase_1 <- testphase[WAPS]
testphase_1$BUILDINGID <- pred1_building[["predictions"]]
pred1_floor <- predict(rf1_floor, data = testphase_1)
Per_rf1_floor <- confusionMatrix(pred1_floor[["predictions"]],testphase$FLOOR)
Per_rf1_floor
# LATITUDE #
testphase_1$FLOOR <- pred1_floor[["predictions"]]
pred1_latitude <- predict(rf1_latitude, data = testphase_1)
Per_rf1_latitude <- postResample(pred1_latitude[["predictions"]],testphase$LATITUDE)
Per_rf1_latitude
# LONGITUDE #
testphase_1$LATITUDE <- pred1_latitude[["predictions"]]
pred1_longitude <- predict(rf1_longitude, data = testphase_1)
Per_rf1_longitude <- postResample(pred1_longitude[["predictions"]],testphase$LONGITUDE)
Per_rf1_longitude
testphase_1$LONGITUDE <- pred1_longitude[["predictions"]]
### Plotting the erros ###
## PHASE 3 ## Measuring the performance in validationData
# BUILDING #
pred1_building <- predict(rf1_building, data = validationData[WAPS])
Per_rf1_building <- confusionMatrix(pred1_building[["predictions"]],validationData$BUILDINGID)
Per_rf1_building
# FLOOR #
validationData_1 <- validationData[WAPS]
validationData_1$BUILDINGID <- pred1_building[["predictions"]]
pred1_floor <- predict(rf1_floor, data = validationData_1)
Per_rf1_floor <- confusionMatrix(pred1_floor[["predictions"]],validationData$FLOOR)
Per_rf1_floor
# LATITUDE #
validationData_1$FLOOR <- pred1_floor[["predictions"]]
pred1_latitude <- predict(rf1_latitude, data = validationData_1)
Per_rf1_latitude <- postResample(pred1_latitude[["predictions"]],validationData$LATITUDE)
Per_rf1_latitude
# LONGITUDE #
validationData_1$LATITUDE <- pred1_latitude[["predictions"]]
pred1_longitude <- predict(rf1_longitude, data = validationData_1)
Per_rf1_longitude <- postResample(pred1_longitude[["predictions"]],validationData$LONGITUDE)
Per_rf1_longitude
validationData_1$LONGITUDE <- pred1_longitude[["predictions"]]
### Plotting the erros ###
#Classification Error Building
df_error_check_v2 <- gdata::combine(validationData[,c(521:524)], validationData_1[,c(521:524)])
df_error_check_v2$source <- as.character(df_error_check_v2$source)
df_error_check_v2$source[df_error_check_v2$source == "validationData[, c(521:524)]"] <- "real"
df_error_check_v2$source[df_error_check_v2$source == "validationData_1[, c(521:524)]"] <- "predicted"
df_error_check <- cbind(validationData[,c(521:524)], validationData_1[,c(521:524)])
names(df_error_check)[1:4] <- paste("real", names(df_error_check)[1:4], sep = "_")
names(df_error_check)[5:8] <- paste("pred", names(df_error_check)[5:8], sep = "_")
### Plotting the distances ###
plot_ly(df_error_check_v2, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR, color = ~source,
colors = c("#14ec14", "#FF0000"), size = 0.01) %>%
add_markers() %>%
layout(scene= list(xaxis = list(title = "Longitude"),
yaxis = list(title = "Latitude"),
zaxis = list(title = "Floor")))
df_error_check$long_diff = abs(abs(df_error_check$real_LONGITUDE) - abs(df_error_check$pred_LONGITUDE))
df_error_check$lat_diff = abs(abs(df_error_check$real_LATITUDE) - abs(df_error_check$pred_LATITUDE))
summary(df_error_check$long_diff)
summary(df_error_check$lat_diff)
### Distance analysis visualization for Latitude & Longitude - Error distance analysis
df_error_check$PREDICTION = "empty"
for (i in 1:nrow(df_error_check)) {
if (df_error_check[i,"long_diff"] <= 9 & df_error_check[i,"lat_diff"] <= 9) {
df_error_check[i,"PREDICTION"] = "Great! :)"
} else if (df_error_check[i,"long_diff"] <= 20 & df_error_check[i,"lat_diff"] <= 20) {
df_error_check[i,"PREDICTION"] = "Ok... :|"
} else if (df_error_check[i,"long_diff"] <= 50 & df_error_check[i,"lat_diff"] <= 50) {
df_error_check[i,"PREDICTION"] = "Awfull :("
} else {
df_error_check[i,"PREDICTION"] = "Weird :S"
}
}
df_error_check$PREDICTION = as.factor(x = df_error_check$PREDICTION)
summary(df_error_check$PREDICTION)
plot_ly(df_error_check) %>%
add_markers(x = ~pred_LONGITUDE, y = ~pred_LATITUDE, z = ~pred_FLOOR, color = ~PREDICTION, colors = c("chartreuse", "firebrick1", "yellow1"), marker = list(size = 3)) %>%
layout(title = "Distance analysis")
### Floor prediction analysis
df_error_check$WHERE_SHOULD_BE = "None"
for (i in 1:nrow(df_error_check)) {
if (df_error_check[i,"real_FLOOR"] != df_error_check[i,"pred_FLOOR"]) {
df_error_check[i,"WHERE_SHOULD_BE"] = paste("Should be floor", df_error_check[i, "real_FLOOR"])
} else if (df_error_check[i,"real_FLOOR"] == df_error_check[i,"pred_FLOOR"]) {
df_error_check[i,"WHERE_SHOULD_BE"] = "Good Prediction"
}
}
df_error_check$WHERE_SHOULD_BE = factor(df_error_check$WHERE_SHOULD_BE)
summary(df_error_check$WHERE_SHOULD_BE)
plot_ly(df_error_check) %>%
add_markers(x = ~pred_LONGITUDE, y = ~pred_LATITUDE, z = ~pred_FLOOR, color = ~WHERE_SHOULD_BE, marker = list(size = 3)) %>%
layout(title = "In which floor should each capture be in?")
df_knn_error$WHERE_SHOULD_BE = "None"
for (i in 1:nrow(df_knn_error)) {
if (df_knn_error[i,"real_FLOOR"] != df_knn_error[i,"pred_FLOOR"]) {
df_knn_error[i,"WHERE_SHOULD_BE"] = paste("Should be floor", df_knn_error[i, "real_FLOOR"])
} else if (df_knn_error[i,"real_FLOOR"] == df_knn_error[i,"pred_FLOOR"]) {
df_knn_error[i,"WHERE_SHOULD_BE"] = "Good Prediction"
}
}
df_knn_error$WHERE_SHOULD_BE = factor(df_knn_error$WHERE_SHOULD_BE)
summary(df_knn_error$WHERE_SHOULD_BE)
plot_ly(df_knn_error) %>%
add_markers(x = ~pred_LONGITUDE, y = ~pred_LATITUDE, z = ~pred_FLOOR, color = ~PREDICTION, colors = c("chartreuse", "firebrick1", "yellow1"), marker = list(size = 3)) %>%
layout(title = "Distance analysis")
summary(df_knn_error$lat_diff)
summary(df_knn_error$long_diff)
ggplot(df_knn_error, aes(x=df_knn_error$lat_diff))+
geom_density(color="darkblue", fill="lightblue")
ggplot(df_knn_error, aes(x=df_knn_error$lat_diff))+
geom_density(color="darkblue", fill="lightblue") + xlim(-20)
ggplot(df_knn_error, aes(x=df_knn_error$lat_diff))+
geom_density(color="darkblue", fill="lightblue") + xlim(-20, 200)
ggplot(df_knn_error, aes(x=df_knn_error$lat_diff))+
geom_density(color="darkblue", fill="lightblue") + xlim(20, 200)
ggplot(df_knn_error, aes(x=df_knn_error$long_diff))+
geom_density(color="darkblue", fill="lightblue") + xlim(20, 200)
ggplot(df_knn_error, aes(x=df_knn_error$lat_diff))+
geom_density(color="darkblue", fill="lightblue") + xlim(20, 200)
ggplot(df_knn_error, aes(x=df_knn_error$long_diff))+
geom_density(color="darkblue", fill="lightblue") + xlim(20, 200)
ggplot(df_knn_error, aes(x=df_knn_error$lat_diff))+
geom_density(color="darkblue", fill="lightblue") + xlim(20, 200)
View(df_knn_error)
over50_error <- filter(df_knn_error, df_knn_error$lat_diff > 50, df_knn_error$long_diff > 50)
over50_error <- filter(df_knn_error, df_knn_error$lat_diff > 50 & df_knn_error$long_diff > 50)
View(over50_error)
over50_error <- filter(df_knn_error, df_knn_error$lat_diff > 50)
View(over50_error)
over50_error <- filter(df_knn_error, df_knn_error$long_diff > 50)
grid::grid.raster(readPNG("pictures/UJI_map.png"))
pacman::p_load(tibble, readr, tidyr, anytime, reshape2, corrplot, ggplot2, caret, highcharter,
plotly, dplyr,plyr,imager,RColorBrewer,gdata,
randomForest, tidyr, forecast, lubridate, scatterplot3d, ranger, data.table, h2o, plyr, FNN, class, png)
grid::grid.raster(readPNG("pictures/UJI_map.png"))
pacman::p_load(tibble, readr, tidyr, anytime, reshape2, corrplot, ggplot2, caret, highcharter,
plotly, dplyr,plyr,imager,RColorBrewer,gdata,
randomForest, tidyr, forecast, lubridate, scatterplot3d)
setwd("C:/Users/Ibai/Desktop/Part_3/Task_2/Techniques for Wifi Locationing/")
trainingData <- as_tibble(read.csv2("Data/trainingData.csv", sep= ",", stringsAsFactors=FALSE))
validationData <- as_tibble(read.csv2("Data/validationData.csv", sep= ",", stringsAsFactors=FALSE))
## Pre-processing the data ##
# anyNA(trainingData)
# anyNA(validationData)
ffeatures <-c("FLOOR", "BUILDINGID", "SPACEID", "RELATIVEPOSITION", "USERID", "PHONEID")
trainingData[,ffeatures] <- apply(trainingData[,ffeatures], 2, as.factor)
validationData[,ffeatures] <- apply(validationData[,ffeatures], 2, as.factor)
rm(ffeatures)
# Changing the TimeStamp from UNIX units to Date-Time units
trainingData$TIMESTAMP <- anytime(trainingData$TIMESTAMP)
validationData$TIMESTAMP <- anytime(validationData$TIMESTAMP)
# ## Tracking different locations ##
#
# locations <- trainingData %>%
#   distinct(BUILDINGID, FLOOR, SPACEID, RELATIVEPOSITION)
join <- c("BUILDINGID","FLOOR")
trainingData$location <- apply(trainingData[, join], 1, paste, collapse= "-")
validationData$location <- apply(validationData[, join], 1, paste, collapse= "-")
rm(join)
trainingData <- unique(trainingData)
setwd("C:/Users/Ibai/Desktop/Part_3/Task_2/Techniques for Wifi Locationing/")
trainingData <- as_tibble(read.csv2("Data/trainingData.csv", sep= ",", stringsAsFactors=FALSE))
validationData <- as_tibble(read.csv2("Data/validationData.csv", sep= ",", stringsAsFactors=FALSE))
## Pre-processing the data ##
# anyNA(trainingData)
# anyNA(validationData)
ffeatures <-c("FLOOR", "BUILDINGID", "SPACEID", "RELATIVEPOSITION", "USERID", "PHONEID")
trainingData[,ffeatures] <- apply(trainingData[,ffeatures], 2, as.factor)
validationData[,ffeatures] <- apply(validationData[,ffeatures], 2, as.factor)
rm(ffeatures)
# Changing the TimeStamp from UNIX units to Date-Time units
trainingData$TIMESTAMP <- anytime(trainingData$TIMESTAMP)
validationData$TIMESTAMP <- anytime(validationData$TIMESTAMP)
# ## Tracking different locations ##
#
# locations <- trainingData %>%
#   distinct(BUILDINGID, FLOOR, SPACEID, RELATIVEPOSITION)
join <- c("BUILDINGID","FLOOR")
trainingData$location <- apply(trainingData[, join], 1, paste, collapse= "-")
validationData$location <- apply(validationData[, join], 1, paste, collapse= "-")
rm(join)
## Removing duplicates ##
trainingData <- trainingData[!duplicated(trainingData), ]
View(trainingData)
validationData <- validationData[!duplicated(validationData), ]
pacman::p_load(tibble, readr, tidyr, anytime, reshape2, corrplot, ggplot2, caret, highcharter,
plotly, dplyr,plyr,imager,RColorBrewer,gdata,
randomForest, tidyr, forecast, lubridate, scatterplot3d)
setwd("C:/Users/Ibai/Desktop/Part_3/Task_2/Techniques for Wifi Locationing/")
trainingData <- as_tibble(read.csv2("Data/trainingData.csv", sep= ",", stringsAsFactors=FALSE))
validationData <- as_tibble(read.csv2("Data/validationData.csv", sep= ",", stringsAsFactors=FALSE))
## Pre-processing the data ##
# anyNA(trainingData)
# anyNA(validationData)
ffeatures <-c("FLOOR", "BUILDINGID", "SPACEID", "RELATIVEPOSITION", "USERID", "PHONEID")
trainingData[,ffeatures] <- apply(trainingData[,ffeatures], 2, as.factor)
validationData[,ffeatures] <- apply(validationData[,ffeatures], 2, as.factor)
rm(ffeatures)
# Changing the TimeStamp from UNIX units to Date-Time units
trainingData$TIMESTAMP <- anytime(trainingData$TIMESTAMP)
validationData$TIMESTAMP <- anytime(validationData$TIMESTAMP)
# ## Tracking different locations ##
#
# locations <- trainingData %>%
#   distinct(BUILDINGID, FLOOR, SPACEID, RELATIVEPOSITION)
join <- c("BUILDINGID","FLOOR")
trainingData$location <- apply(trainingData[, join], 1, paste, collapse= "-")
validationData$location <- apply(validationData[, join], 1, paste, collapse= "-")
rm(join)
## Removing duplicates ##
trainingData <- trainingData[!duplicated(trainingData), ]
## Plotting the density of the WAP
## Train dataset
WAPdens <- trainingData[, grep("WAP", names(trainingData))]
density <- melt(WAPdens)
# ggplot(density, aes(x=density$value))+
# geom_density(color="darkblue", fill="lightblue") + xlim(-104,-1)
# boxplot
boxplot <- filter(density, density$value != 100)
# boxplot(boxplot$value)
rm(boxplot)
## Validation dataset
WAPdens2 <- validationData[, grep("WAP", names(validationData))]
density2 <- melt(WAPdens2)
dev.off()
# ggplot(density2, aes(x=density2$value))+
#   geom_density(color="darkblue", fill="lightblue") + xlim(-104,-1)
# boxplot
boxplot2 <- filter(density2, density2$value != 100)
# boxplot(boxplot2$value)
range(boxplot2$value)
rm(boxplot2)
### We have dBm signals that are higher than -34, which is very unusual.
# Analyzing which WAP connections have these values:
densityfilt <- filter(density, density$value > -34 & density$value < 0)
# plot_ly(x = densityfilt$variable, type = "histogram")
#Most of the values btween -34 and 0 dBm come from WAP087, WAP065, WAP066
# ggplot(trainingData, aes(x=WAP087))+
#   geom_density(color="darkblue", fill="lightblue") + xlim(-104,-1)
#
# ggplot(trainingData, aes(x=WAP065))+
#   geom_density(color="darkblue", fill="lightblue") + xlim(-104,-1)
#
# ggplot(trainingData, aes(x=WAP066))+
#   geom_density(color="darkblue", fill="lightblue") + xlim(-104,-1)
WAPnames <- colnames(trainingData[,grep("WAP", names(trainingData))])
rows <- c()
for(i in 1:length(grep("WAP", names(trainingData)))){
s <- which(trainingData[,i] > -29.99 & trainingData[,i] < 0)
if (length(s) !=0) {
rows <- c(rows,s)
}
}
rows <- unique(rows)
trainingData <- trainingData[-rows,]
range(trainingData[, grep("WAP", names(trainingData))])
# plot_ly(x = train_maxsignal$PHONEID, type = "histogram")
# plot_ly(x = train_maxsignal$location, type = "histogram")
# plot_ly(x = train_maxsignal$TIMESTAMP, type = "histogram")
# plot_ly(x = train_maxsignal$USERID, type = "histogram")
# plot_ly(x = train_maxsignal$RELATIVEPOSITION, type = "histogram")
# plot_ly(x = train_maxsignal$SPACEID, type = "histogram")
#Location of trainingset and Validationset
# plot_ly(x = trainingData$location, type = "histogram")
# plot_ly(x = validationData$location, type = "histogram")
# We see that 199 WAP signals out of 727 are higher than -34. Let's filter the data:
train_maxsignal_2_4 <- filter(train_maxsignal, train_maxsignal$location == "2-4")
trainingData_2_4 <- filter(trainingData, trainingData$location == "2-4")
trainingData_2_4_us6 <- filter(trainingData, trainingData$location == "2-4" & trainingData$USERID == "6")
WAPus6 <- trainingData_2_4_us6[, grep("WAP", names(validationData))]
trainingData_2_4_us6 <- melt(WAPus6)
trainingData_2_4_us6 <- filter(trainingData_2_4_us6, trainingData_2_4_us6$value != 100)
# ggplot(trainingData_2_4_us6, aes(x=value))+
#   geom_density(color="darkblue", fill="lightblue") + xlim(-104,-1)
#### Takeaway: Even though USER 6 has many WIFI signs between -34 and 0, it is still an important USER.
# plot_ly(x = train_maxsignal_2_4$USERID, type = "histogram") # User 3 involved as well?
# plot_ly(x = trainingData_2_4$USERID, type = "histogram") # oNLY 3 USERS have been in 2-4
## We see that the User 6 has uncommon dBs signals. Let´s delve into all the WAP signals of this user:
user6 <- filter(trainingData, trainingData$USERID == 6)
densUser6 <- melt(user6[, grep("WAP|location", names(user6))])
# plot_ly(x = densUser6$location, y= densUser6$value,  type = "bar")
# ggplot(densUser6, aes(x=value))+
# geom_density(color="darkblue", fill="lightblue") + xlim(-104,-1)
user6wap_loc <- melt(user6[, grep("WAP|location", names(user6))])
user6wap_loc_r <- filter(user6wap_loc, user6wap$value < 0 & user6wap$value > -34)
# plot_ly(x = user6wap_loc_r$location, y= user6wap_loc_r$value,  type = "bar")
user6wap087_melt <- filter(densUser6, densUser6$variable == "WAP087")
# ggplot(user6wap087_melt, aes(x=user6wap087_melt$value)) +
# geom_density(color="darkblue", fill="lightblue") + xlim(-104,-1)
## CONCLUSIONS USER 6
# All the Wifi signals of this user comes locations 2-3 and 2-4
# User 6 has in total 566 RSSI signs between -34 an 0. 13,25% of them come from WAP087. This values range from -10 and -20
##### DEALING WITH ALL THE NO SIGNAL VALUES ########
trainingData <- replace(trainingData, trainingData == 100, 0)
validationData <- replace(validationData, validationData == 100, 0)
trainingData <- replace(trainingData, trainingData == -104, 0.001)
validationData <- replace(validationData, validationData == -104, 0.001)
# All the WAP signal have been moved to positive
for(i in 1:length(grep("WAP", names(trainingData)))){
l <- which(trainingData[,i] != 0)
trainingData[l,i] <- trainingData[l,i] + 104
}
for(i in 1:length(grep("WAP", names(validationData)))){
l <- which(validationData[,i] != 0)
validationData[l,i] <- validationData[l,i] + 104
}
trainingData <- replace(trainingData, trainingData == 104.001, 0.001)
validationData <- replace(validationData, validationData == 104.001, 0.001)
range(trainingData[,c(1:520)])
range(validationData[,c(1:520)])
which(trainingData[,c(1:520)] > 70)
range(validationData[,c(1:520)])
trainingData <- as_tibble(read.csv2("Data/trainingData.csv", sep= ",", stringsAsFactors=FALSE))
validationData <- as_tibble(read.csv2("Data/validationData.csv", sep= ",", stringsAsFactors=FALSE))
range(trainingData[,c(1:520)])
range(validationData[,c(1:520)])
which(validationData[,c(1:520)] < -100)
which(trainingData[,c(1:520)] < -100)
# anyNA(trainingData)
# anyNA(validationData)
aa <- filter(trainingData, trainingData[,c(1:520)] < -100)
# anyNA(trainingData)
# anyNA(validationData)
aa <- c()
for(i in 1:length(grep("WAP", names(trainingData)))){
s <- which(trainingData[,i] < -100)
if (length(s) !=0) {
aa <- c(aa,s)
}
}
aa <- unique(aa)
pr <- trainingData[a,]
pr <- trainingData[aa,]
View(pr)
plot_ly(x = pr$PHONEID, type = "histogram")
plot_ly(x = pr$USERID, type = "histogram")
plot_ly(x = pr$BUILDINGID, type = "histogram")
plot_ly(x = pr$FLOOR, type = "histogram")
